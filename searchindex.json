{"categories":[{"title":"experiences","uri":"https://vgajria.com/categories/experiences/"},{"title":"tutorials","uri":"https://vgajria.com/categories/tutorials/"}],"posts":[{"content":" Converted from doc.tex. This is a tutorial to Lex, with quick introduction to Yacc, presented to my juniors for their Systems Programming and Compiler Construction course.\nYou can refer to the following material:\n [Code] [Slides] [LaTeX]\nLexical Analysis Lexical Analysis Tokens \u0026lt;token, value\u0026gt;\n token = unique integer value, e.g. ID = 1, INT = 2 value (optional) = data related to token, e.g. \u0026ldquo;x\u0026rdquo;, 5  Hence, we have \u0026lt;ID, \u0026ldquo;x\u0026rdquo;\u0026gt;, \u0026lt;INT, 5\u0026gt;\nLexer as DFA Problem: Writing so much logic is very tedious and unmaintainable in code!\nLex/ Flex Lex/ Flex  Computer program that generates lexical analyzers (also known as \u0026ldquo;scanners\u0026rdquo;\u0026quot; or \u0026ldquo;lexers\u0026rdquo;) Flex (fast lexical analyzer generator) is a free and open-source software alternative to lex  It is not a framework or a library, it writes the code for you\nWhy Lex  Write rules, not code Regular Expression \u0026ldquo;Patterns\u0026rdquo; for DFA building Streaming lexer, does not load entire files all at once Hence, it is extremely fast Written for C orignally but can be used for C++ Reimplemented for other languages like Rust, Go, Python\u0026hellip;  Example 1 %% [0-9] printf(\u0026quot;Digit: %s \\n\u0026quot;, yytext); \\n printf(\u0026quot;New line \\n\u0026quot;); . printf(\u0026quot;Any: %s \\n\u0026quot;, yytext);  These 4 lines generate 1734 lines of C code!\n%% Sections: The %% is important because it marks the start of Rules sections\n**yytext:**yytext is a global variable that stores the text of the lexeme matched by regex.\nUsing flex Generate code using:\nflex \u0026lt;filename\u0026gt; gcc -lfl lex.yy.c -o \u0026lt;outputname\u0026gt;  Run interactive mode:\n./\u0026lt;outputname\u0026gt;  Pass in a file\u0026rsquo;s text:\ncat \u0026lt;file\u0026gt; | ./\u0026lt;outputname\u0026gt;  Example 2 DIGIT [0-9] ID [a-zA-Z][a-zA-Z0-9]* %% [\\t ] { /* Perform no action */ } {DIGIT}+ printf(\u0026quot;Digit: %s \\n\u0026quot;, yytext); {ID} printf(\u0026quot;Identifier: %s \\n\u0026quot;, yytext); \\n printf(\u0026quot;New line \\n\u0026quot;);  %% Sections: The section above %% is Declarations section with C code, declarations (DIGIT, ID), and other configurations.\nExample 3 ... declarations %% ... rules %% int main(argc, argv) int argc; char **argv; { ++argv, --argc; if ( argc \u0026gt; 0 ) yyin = fopen( argv[0], \u0026quot;r\u0026quot; ); else yyin = stdin; yylex(); }  %% Sections: An optional user code section can be added after the rules. This section is copied verbatim, i.e. directly into the generated code.\nyyin: File to be processed. Set it to a readable file pointer. Default is stdin i.e. command line input.\nyylex: Continuously lexically analyse a file. If you return something, it will pause execution and start again if you call it again. You can change the return type by modifying YYDECL macro (advanced).\nSummary Code structure [ %{ ... user code for header files and other config %} ] ... declarations, if any %% ... rules in tabular form, regex and action [ %% ... user code for anything after the rules, like main ]  Where $[ block ]$ means optional\nStandard structure: This structure is used in all Lex implementations. Yacc and its implementations also uses same structure!\nVariables More examples Assembly-like language Example 4 Assembly-like calculator\nADD 5; PRINT; * 4; PRINT; / -2; ADD 7; PRINT; sub 13; print; clear; print; EXIT;  Yacc/ Bison Yacc - Parser Generator Integrating Yacc/Bison with Lex/Flex yylval: yylval, defined in .tab.c, is used to store data related to tokens (value from \u0026lt;token, value\u0026gt;). It\u0026rsquo;s datatype is defined using YYSTYPE macro and is usually defined using Yacc/ Bison.\nExample 5 Calculator with infix syntax\n1 + 2 3.0 / 2 2 * (3.1427 / 3) 1.1 + 2 - 3 * 4 / 5.  is based on\nE -\u0026gt; E + E | E - E | T T -\u0026gt; T * F | T / F | F F -\u0026gt; ( E ) | num | id  Code is generated using Yacc/ Bison.\nD.I.Y.  CSV parser using Flex HTML/ XML parser using Flex JSON/ YAML/ TOML/ CFG/ INI parser using Flex or Flex+Bison Assembly-like stack machine using Flex or Flex+Bison Pascal/ TCL/ C language parser using Flex+Bison Use C++ and multiple files, explore the option flags  References [1] Tom Niemann. Lex yacc tutorial. URL https://cse.iitkgp.ac.in/~bivasm/notes/LexAndYaccTutorial.pdf.\n[2] John Millaway Vern Paxson, Will Estes. Lexical analysis with flex. 2012. URL https://www.iith.ac.in/~ramakrishna/Compilers-Aug14/doc/flex.pdf.\n[3] Keith Schwarz Julie Zelenski. flex in a nutshell. 2012. URL https://web.stanford.edu/class/archive/cs/cs143/cs143.1128/handouts/050%20Flex%20In%20A%20Nutshell.pdf.\n[4] Lan Gao. Flex tutorial. URL http://alumni.cs.ucr.edu/~lgao/teaching/flex.html.\n[5] Flex. The flex manual page. 2021. URL http://dinosaur.compilertools.net/flex/manpage.html.\n","id":0,"section":"posts","summary":"Converted from doc.tex. This is a tutorial to Lex, with quick introduction to Yacc, presented to my juniors for their Systems Programming and Compiler Construction course.\nYou can refer to the following material:\n [Code] [Slides] [LaTeX]\nLexical Analysis Lexical Analysis Tokens \u0026lt;token, value\u0026gt;\n token = unique integer value, e.g. ID = 1, INT = 2 value (optional) = data related to token, e.g. \u0026ldquo;x\u0026rdquo;, 5  Hence, we have \u0026lt;ID, \u0026ldquo;x\u0026rdquo;\u0026gt;, \u0026lt;INT, 5\u0026gt;","tags":["c","c++","compilers"],"title":"Lex Tutorial, with a bit of Yacc","uri":"https://vgajria.com/2021/03/2021-03-25-lex-tutorial-with-a-bit-of-yacc/","year":"2021"},{"content":"I recently decided to reinstall MacOS on my MacBook Air 2017 (yes, I know it\u0026rsquo;s outdated) after the service centre was able to revive the motherboard which died unexpectedly. The purpose of the reinstall was to micromanage my development environment which was filled with unexpected soft-links, aliases, and binary files in random places.\nLooking at my old Catalina installation retrospectively, I realised that my development set-up required only 10 applications. With better management I could easily save space on my frail laptop. Below, I present these essential applications with the MacOS solutions for each of them.\nThe Checklist  Basic tools like git and cc Package manager Terminal emulator Shell program A good font for the shell Dot files management Web browser Privacy and keys The best text editor The popular text editor  MacOS Solutions 1. Xcode command-line tools If you aren\u0026rsquo;t a MacOS/ iOS developer you can make do without the hefty Xcode. I avoid Xcode IDE because my MacBook only has 128GB of SSD Storage (yes, it sucks). However the command-line tools come with a lot of goodies like git, clang, python3 and such.\nI tried xcode-select --install but it didn\u0026rsquo;t work. So I download the tools from Apple\u0026rsquo;s developer centre.\nhttps://developer.apple.com/download/more/\n2. Homebrew The missing package manager for MacOS is a must for any developer. I stopped installing applications from .dmg files and I\u0026rsquo;d rather get the cask through brew.\nhttps://brew.sh\nI also install homebrew-rmtree for good measures. I hate orphan packages.\nFrom here on, 90% of my applications will be installed through Homebrew.\n3. iTerm2  If a developer is afraid of the terminal, is he really a developer?\n I spend most of my time in the terminal. I have so many configurations and rules that I impose upon myself that I can make an entire blog post about it. For now, let me tell you about iTerm 2:\n It\u0026rsquo;s pretty It\u0026rsquo;s fast Windowing system is amazing Profiles are amazing Keymaps for Option+Backspace, Option+‚Üê are amazing It\u0026rsquo;s amazing  You can find my iterm2 profile here.\nbrew cask install iterm2  4. Oh my ZSH! The name is very accurate. ZSH is far better than Bash for daily use. Oh-my-zsh will do all the set-up for you, so you can focus on setting the right colour theme and such.\nhttps://github.com/ohmyzsh/ohmyzsh\nSome additional plugins to install:\n zsh-autosuggestion - for Fish-like suggestions zsh-syntax-highlighting - for prettier commands zsh-completions - for extra completion scripts z - for jumping around your SSD colorize - for prettier terminal colored-man-pages - for readable man pages git - for better git integration in terminal  5. Fira Code A good terminal and a good shell, together with a good font. Aesthetics matter a lot when I\u0026rsquo;m coding. Fira Code is simple, with good ligatures support for easier reading. This is definitely a subjective taste so you can install anything else.\nbrew tap homebrew/cask-fonts brew cask install font-fira-code  6. YADM  Yet Another Dotfiles Manager\n However, I\u0026rsquo;ve never had a Dotfiles manager before. YADM is my first and only choice for a Dotfiles manager. It\u0026rsquo;s a wrapper over Git so it\u0026rsquo;s extremely hackable. I don\u0026rsquo;t need to learn any new commands, I just do yadm add -u -a , yadm commit -m \u0026quot;Text\u0026quot;, yadm push. It\u0026rsquo;s simple and intuitive for any git user.\nbrew install yadm  7. Firefox For the most part, I use Safari because of its simpler and faster UI. However for web development and a better extensions support, I choose Firefox over Chrome because of the following reasons:\n It\u0026rsquo;s open source It\u0026rsquo;s not Chrome Battery and RAM impact is lower It\u0026rsquo;s not Chrome It syncs well with Firefox on my android phone It\u0026rsquo;s not Chrome It\u0026rsquo;s most probably more private than Chrome It\u0026rsquo;s not Chrome Competition should exist between browsers You get the idea  Admittedly, Mozilla has introduced lots of improvements in Firefox and as time passes, it\u0026rsquo;s becoming more pleasurable to use Firefox. Adding to this, when I logged into my Firefox account, I was impressed by how well Mozilla has handled syncing of configuration. It works like Magic.\nbrew cask install firefox  8. GPG I use GPG for signing my commits in git. It\u0026rsquo;s pretty straightforward. You can read the entire guide here.\nbrew install gnupg pinentry-mac  9. Vim  The best editor\n My journey has been from\nSublime -\u0026gt; Atom -\u0026gt; Vim -\u0026gt; VSCode + Vim -\u0026gt; VSCode + Emacs -\u0026gt; Emacs -\u0026gt; Vim\nSublime was great but not as feature-rich as I wanted it to be. Atom was too heavy for my poor laptop. VSCode was an amazing balance between features of Atom and performance of Sublime, but later as I added more plugins, it got much heavier.\nI decided to learn Emacs and configure it using Doom. At first, it was amazing. But with the feature-creep and confusing controls (I used Evil bindings), it was a headache to configure. In the end, I settled for a minimal configuration of Macvim.\nAnd my laptop loves it as much as I do. I get 3-4 hours more battery life. It\u0026rsquo;s much faster than Emacs and VSCode. I use it primarily for C++, Go, and Python. I\u0026rsquo;m yet to use Vim for web development.\nFor autocompletion, I avoid YouCompleteMe. It\u0026rsquo;s archaic, too heavy and difficult to set-up. Instead, I use the fancy LSP server, same as VSCode. I\u0026rsquo;ve set-up Coc.nvim to do this, and most of my projects are easy to configure. For C++, clangd can be set up using CMake. For python, I do no configuration at all. It just works.\nbrew cask install macvim  I\u0026rsquo;ve also configured the terminal version to work in vi-compatible mode (no GUI) for quick edits.\nalias vim=\u0026quot;mvim -v\u0026quot;  A more detailed explaination of my Vim configuration will be the subject for a future blogpost.\n10. VSCode  The popular editor\n Again, I do not like hefty IDEs on my feeble laptop. So I try to configure text editors as much as possible.\nbrew cask install visual-studio-code\nA few extensions that I use are PlatformIO for embedded development and simple-ghc for simplistic Haskell development. Some standard extensions like\nConclusion The checklist presented in this article is what I absolutely need on any new laptop to start coding productively. Your requirements may vary depending on how comfortable you are with other tools. My set-up is so lightweight in nature that my 128GB laptop works pretty well for the kind of development I do. If you have any questions you can drop me an email or contact me on twitter @vixrant.\nFurthermore, I am currently writing two more articles: one on my set-up for different programming languages, and one for my emacs configuration. Look forward to that!\n","id":1,"section":"posts","summary":"I recently decided to reinstall MacOS on my MacBook Air 2017 (yes, I know it\u0026rsquo;s outdated) after the service centre was able to revive the motherboard which died unexpectedly. The purpose of the reinstall was to micromanage my development environment which was filled with unexpected soft-links, aliases, and binary files in random places.\nLooking at my old Catalina installation retrospectively, I realised that my development set-up required only 10 applications. With better management I could easily save space on my frail laptop.","tags":["mac"],"title":"My MacOS development set-up checklist","uri":"https://vgajria.com/2020/09/2020-09-16-my-macos-development-set-up/","year":"2020"},{"content":"It\u0026rsquo;s May 2019. Summer heat is burning my body, and so is my anticipation of getting selected at top MNC for an internship. I had applied for big name companies such as Google, Github, and IBM way back in March. However I still didn\u0026rsquo;t receive any response from these companies. I was terrified. If I couldn\u0026rsquo;t find an internship for this summer, I would miss out on learning industry-standard technologies.\nSo I went online and looked for internship positions in start-ups. I interned at a start-up a year before, so I knew that if I want to learn the best technologies in a short time, I need to work at a start-up. After hours of searching and applying, I was called for an interview at an interesting start-up in South Mumbai‚Ää-‚ÄäLido Learning.\nI was hesitant to go to the interview. The office was an hour away from my home in train, and Mumbai local trains are difficult. Plus, I had applied for those big name companies‚Ää-‚Äämaybe I should wait for their response? After hours of thinking, I decided to go to the office and give the interview for practice! Sounds weird, but that was my intention when I boarded the train. When I walked into the office, I was flabbergasted. There were dozens of employees, taking tuitions, making video content, deciding questions to ask children of a range of ages. It was a different kind of start-up. Not what I had in my mind when I was applying for internships.\nI sat in the lobby while the watchman went and brought someone out to meet, turns out he brought the CTO of the company, Nishu, to greet me. I had a good chat over coffee with the CTO, who was very friendly and had a good talk over coffee and my r√©sum√©. Later, he asked my future mentor, Jivitesh, to take my interview.\nI was honestly not going to join the company considering the travel distance from my home, but this first impression changed my mind. I gave the interview mid-May, joined after my semester finals on 31st May 2019.\nProjects One reason I joined Lido was that I was familiar with half of the technologies that they were using. Standard full-stack technologies such as React and NodeJS. But there was a whole slew of new tools that I wanted to learn‚Ää-‚ÄäGraphQL, AWS, and event sourcing‚Ää-‚Ääand Lido allowed me to do just that.\nI started off with small projects such as automating a process on our CRM software using NodeJS. Here, my mentor guided me on how to structure my project. This was a skill I couldn\u0026rsquo;t have learned on my own. Later, I moved to front-end development using React. I worked on a rich-text dashboard similar to Microsoft Word, where a staff can create questions for students. Here too, I was mentored on good coding standards. These things are so minuscule yet important, we aren\u0026rsquo;t taught these in college. Here at Lido, we weren\u0026rsquo;t focussed on writing CRUD APIs. We were using Hasura GraphQL, which allowed us to focus more on using the APIs than to writing them. This allowed us to make projects really fast. I worked with my mentor for setting up a good migrations-managed, do-not-screw-up-the-production kind of system for Hasura.\nAfter the web development projects, my mentors allowed me to shift to something new. I was asked to research event sourcing and find out the difference between Apache Kafka and AWS Kinesis. We started using Kinesis and I learned a lot about how to manage large volumes of data.\nInitially we started with micro-services, but later we moved on to a serverless platform using AWS lambda functions. This was the first time that I was using AWS. Some things were re-written using serverless by my friends, who joined the company on my reference. And mind you, all of this happened in 2 months! I went from doing what I know in web development in my first month, to using exciting new technologies in my second month.\nTakeaways From all the projects that I mentioned above, I learned a whole slew of new technologies. However, the 5 real takeaways from my internship are:\n An hour of planning saves weeks of frustration A project with good coding standard is self-explanatory to your co-workers Scalability of a project very important for a fast-moving start-up Work smart not hard. Grinding 9‚Äì5 isn\u0026rsquo;t as important as getting things done Learn from your co-workers! They have so much experience in the industry, it teaches you more than academia  Culture at¬†LIDO As I mentioned before, I joined Lido because I wanted to learn new things at a fast pace. Coming to office by travelling in a crowded Mumbai local train for an hour was not an easy task, especially to manage alongside regular college. But my mentor and the CTO were very understanding and allowed me to bend my working hours as long as work was getting done. The office space in Lower Parel, Mumbai is amazing. The office itself has a very different feeling than most start-ups. It really felt like a more established start-up with a concrete idea than a \u0026ldquo;throw something at a wall and see if it sticks\u0026rdquo; kind of vibe. It was a good decision to go for the interview and work there for 2 months. If I hadn\u0026rsquo;t boarded the train to give the interview, I would\u0026rsquo;ve missed out on learning so much. In the end, I was happy with what the company taught me and how they transformed me.\n","id":2,"section":"posts","summary":"It\u0026rsquo;s May 2019. Summer heat is burning my body, and so is my anticipation of getting selected at top MNC for an internship. I had applied for big name companies such as Google, Github, and IBM way back in March. However I still didn\u0026rsquo;t receive any response from these companies. I was terrified. If I couldn\u0026rsquo;t find an internship for this summer, I would miss out on learning industry-standard technologies.","tags":["internship"],"title":"Internship Experience - Lido Learning","uri":"https://vgajria.com/2019/08/2019-08-25-lido-experience/","year":"2019"},{"content":"I went to KJSCE Hackathon on 5th-6th October, 2018. As a sophomore it\u0026rsquo;s crazy to think about going to a hackathon all alone competing against 55 teams of junior or senior year students with more experience. But I wanted to try my hand at it anyway, allured by the fact that it was sponsored and recognised by some of the big companies in the industry.\nI was the only person who appeared alone, that too as a sophomore. I was scared. People were planning together, discussing the best APIs or libraries, figuring out ways to add a \u0026ldquo;WOW\u0026rdquo; factor to their project, and debating on how to pitch their final work. And I was there with my headphones on, ready to give my best with what I know.\nAnd to my surprise, I bagged the 4th position out of 55. I was shocked when they called out my \u0026ldquo;team\u0026rdquo; name. I absolutely did not expect to be recognised. But as it turned out, everyone loved my work and dedication throughout my 30 hour journey. 4th rank may not sound like an achievement to some, but I was extremely overwhelmed by the outcome. This was the forth hackathon of my career, and the first where I was able to actually present a working prototype.\nI connected with the very helpful and efficient organising committee and the admirable judges of the hackathon. When I was feeling all alone, the organisers would come and talk to me. They would smile and readily offer all possible assisstance. Even the judges of round 1 were quite helpful and curious about my project and how I managed to build it. It was a fantastic experience altogether.\nNow, about the part where I went alone. I\u0026rsquo;ve always teamed up with some amazing people from my college. This decision taught me a lot yesterday. Here\u0026rsquo;s a sum and substance of what I learned:\n1. Organisation I noticed that I started asking some important questions: While working on a full stack product, how much time should I dedicate to frontend and backend? Which one deserves more priority? What features are required and what can be done later? There were so many project management decisions that I had to figure out.\nOrganisation is not all about the workload. Organising yourself is also equally important. Stress and time management are more important. Hackathons are meant to be enjoyed. Manage yourself in such a way that you don\u0026rsquo;t feel stressed.\n2. Focus and dedication It\u0026rsquo;s easy to be distracted by what others are doing. Sometimes I would look at their projects and think \u0026ldquo;Well, all I have is this CRUD application while they have all this fancy ML stuff. These guys are gonna win\u0026rdquo;. But that doesn\u0026rsquo;t mean I should stop working on my project or waste my time.\nDedicate yourself to what you\u0026rsquo;ve planned. Don\u0026rsquo;t stray from your work. Focus on your todo-list. Complete what you need to complete. Don\u0026rsquo;t be disappointed in what you\u0026rsquo;ve done. This is closely related to the next lesson that I learned.\n3. Positive attitude At no point should one feel like giving up on a competition, no matter the progress.\nThroughout the hackathon, I tried to keep a positive attitude. I was tagged as a pessimist in 2017, and I\u0026rsquo;ve since been working on believing in myself. Try to be upbeat in competitions. You\u0026rsquo;ll start attracting people, which helps in making connections, and it\u0026rsquo;ll get you through your stress and work! Just enjoy the competition!\nIf you feel like you can go to a hackathon alone, go for it. Try it out. It\u0026rsquo;ll enlighten you about what you\u0026rsquo;re capable of.\nI\u0026rsquo;ll definitely remember to apply what I learned here at my next hackathon.\n","id":3,"section":"posts","summary":"I went to KJSCE Hackathon on 5th-6th October, 2018. As a sophomore it\u0026rsquo;s crazy to think about going to a hackathon all alone competing against 55 teams of junior or senior year students with more experience. But I wanted to try my hand at it anyway, allured by the fact that it was sponsored and recognised by some of the big companies in the industry.\nI was the only person who appeared alone, that too as a sophomore.","tags":["hackathon"],"title":"Participating solo in a hackathon","uri":"https://vgajria.com/2018/10/2018-10-07-kjsce-hackathon-2018/","year":"2018"},{"content":"Date class Java has a utility Date class ~ java.util.Date, and a text based approach ~ java.text.StringDataFormat. The Date class is difficult to use. It only stores times in seconds and that too from Unix Epoch Time - 1970-01-01T00:00:00Z, and it disrespects Timezones for the most part.\nIf you say:\nDate d = new Date (2018, 9, 19);  You would expect it the Date object to represent 2018-Sep-19. But it actually refers to 3917-Oct-19. The year parameter is actually the delta between 1900 and the year you want, so 3918 = 2018 + 1900. Similarily, 9 here refers to October because January is 0.\nBesides this un-intuitive constructor of Date class, Java doesn\u0026rsquo;t provide any methods for you to operate on these objects. You can\u0026rsquo;t ask the Date object what comes after 24 hours. You\u0026rsquo;d have to calculate that by adding 24*60*60 to the seconds of Date object by using Date.getTime () method, then convert is using TimeUnit.DAYS.convert () or any other TimeUnit function. You can checkout this stackoverflow question: Calculating days between two dates with Java [duplicate] \nThis is uber complicated and just not fun to use.\nLocalDate, LocalTime, LocalDateTime class Lucky for us, Java 8 introduced a new LocalDate and LocalDateTime API. Took them long enough to implement something which was done by other languages ages ago.\nLocalDate represents an immutable object with loads of predefined methods for our ease. It\u0026rsquo;s a delight to finally just say d.addDays () instead of writing redundant calculations or our own implementation of those calculations.\nNotes about LocalDate:  LocalDate has private constructors. You cannot instantiate it. Instead, we have static methods which return the object we need.  LocalDate d = LocalDate.of (2018, Month.SEPTEMBER, 19);\n  You can see from the above definition that\n The syntax is much simpler. 2018 actually refers to 2018 istead of 3918. We have a Month enum with all the months we need. There are LocalDate.ofEpochDay () as well as LocalDate.ofYearDay () and LocalDate.now () for more flexible usecases.    We have brilliant predefined methods such as adding/ subtracting days, months, years, finding the difference in days, and so on.\n  We have separate classes for Date, Time, and one class for both DateTime. The separated Date \u0026amp; Time classes have methods for interpolation.\n  ","id":4,"section":"posts","summary":"Date class Java has a utility Date class ~ java.util.Date, and a text based approach ~ java.text.StringDataFormat. The Date class is difficult to use. It only stores times in seconds and that too from Unix Epoch Time - 1970-01-01T00:00:00Z, and it disrespects Timezones for the most part.\nIf you say:\nDate d = new Date (2018, 9, 19);  You would expect it the Date object to represent 2018-Sep-19. But it actually refers to 3917-Oct-19.","tags":["java"],"title":"Date and Time in Java","uri":"https://vgajria.com/2018/09/2018-09-01-date-and-time/","year":"2018"},{"content":"Functional programming is my favourite aspect of some languages such as JavaScript. You can do the same work in a more expressive way. For example if we want to multiply all terms in an array by 2, there are two ways to go about it in JavaScript.\nvar arr = [1, 2, 3, 4, 5]; for (let i in arr) { arr [i] *= 2; }  The above method requires 3 lines of code and an extra variable to do the same work as:\nvar arr = [1, 2, 3, 4, 5]; arr = arr.map (e =\u0026gt; e * 2);  Java started taking functional programming seriously from Java 8.\nSyntax features Functional programming was accelerated in Java with Java 8\u0026rsquo;s Lambda expressions and :: operator.\nLambda expressions Say you have an interface with only one overridable function, such as an ActionListner:\ninterface ActionListener { public void actionPerformed (Event e); }  This is from the source-code of ActionListener. This is a functional interface. We can annotate it with @FunctionalInterface. The requirement is that the interface must have exactly one abstract method.\nNow when we add this ActionListener to a button we do it as so:\nbutton.add (new ActionListener () { @Override public void actionPerformed (Event e) { Line1 Line2 ... LineN }; });  This is very verbose. To simplify it we can a Lambda expression as so:\nbutton.add ((Event e) -\u0026gt; { Line1 Line2 ... LineN });  This saved us some writing. It\u0026rsquo;s similar to saying \u0026ldquo;Hey, take this Event e and execute this block of statements for me!\u0026rdquo;. Note that this only works when there is one overridable function in the interface.\nThe fantastic thing about Java\u0026rsquo;s lambda expressions is that we don\u0026rsquo;t even need to specify the datatypes of the arguments. And if there is one argument only, we can omit the brackets as well.\nbutton.add (e -\u0026gt; { Line1 Line2 ... LineN });  Let\u0026rsquo;s say you are calling a function f (Event e) when a button is clicked.\nbutton.add (new ActionListener () { @Override public void actionPerformed (Event e) { f (e); }; });  We can simplify the expression into:\nbutton.add (e -\u0026gt; { f (e); });  Since there is a single function call, we can simplify it further by omitting the curly brackets {}:\nbutton.add (e -\u0026gt; f (e));  Look at it! From 6 lines of code to 1 line! This is very much like JavaScript\u0026rsquo;s arrow functions.\nMethod References. We have the above example:\nbutton.add (e -\u0026gt; f (e));  But let\u0026rsquo;s say f is a static function. You can use the Method reference :: operator to call the function directly with the required arguments:\nbutton.add (this::f);  Here since f is a static function in the same class, I\u0026rsquo;m using this. If it was in StaticFunctionsContainer class, we use StaticFunctionsContainer::f.\nYou can also reference the constructor of classes using the Method reference operator. Here are some important references:\nSystem::getProperty System.out::println \u0026quot;abc\u0026quot;::length ArrayList::new int[]::new  Streams Streams are Java objects which allow traditional functional-style syntax.\nThink of it like a stream of water. A stream of water has continuous on-demand data. This allows for operations on-the-fly. But there\u0026rsquo;s no storage of water, is there? Water comes, water goes. Compare this to a jar of water where all the water is collected in one place. It doesn\u0026rsquo;t move, but it\u0026rsquo;s stored safely. This is the difference between a Java Collection and a Java Stream as well.\nYou cannot create a reference to a stream. A stream has to originate from a \u0026lsquo;source\u0026rsquo;, for example, a Java Collection!\nAs an example, say I have a vector V of {1, 2, 3, 4, 5} and I need to map these to their 2*squares + 5:\nV.stream().map(e -\u0026gt; 2*e*e + 5);  Make use of these streams with the above lambda functions to get the best out of functional programming in Java.\n This is my favourite resource for learning more about streams: JournalDev.\n","id":5,"section":"posts","summary":"Functional programming is my favourite aspect of some languages such as JavaScript. You can do the same work in a more expressive way. For example if we want to multiply all terms in an array by 2, there are two ways to go about it in JavaScript.\nvar arr = [1, 2, 3, 4, 5]; for (let i in arr) { arr [i] *= 2; }  The above method requires 3 lines of code and an extra variable to do the same work as:","tags":["java","fp"],"title":"Functional Programming in Java","uri":"https://vgajria.com/2018/09/2018-09-01-functional-programming/","year":"2018"}],"tags":[{"title":"c","uri":"https://vgajria.com/tags/c/"},{"title":"c++","uri":"https://vgajria.com/tags/c++/"},{"title":"compilers","uri":"https://vgajria.com/tags/compilers/"},{"title":"fp","uri":"https://vgajria.com/tags/fp/"},{"title":"hackathon","uri":"https://vgajria.com/tags/hackathon/"},{"title":"internship","uri":"https://vgajria.com/tags/internship/"},{"title":"java","uri":"https://vgajria.com/tags/java/"},{"title":"mac","uri":"https://vgajria.com/tags/mac/"}]}